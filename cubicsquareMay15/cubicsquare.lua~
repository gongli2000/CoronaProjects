-- SUN 7:30 uncomment delete board in reset function
-- 9:08     make rotation work righ
module(..., package.seeall)

function new()
   local direction,oldx,oldy
   local finishedTransit = true
   local curAngle,rowAnchor,colAnchor,angleAnchor,startAngle
   local localGroup = display.newGroup()
   local utils = require("utils")
   local getAnchorPoint = utils.getAnchorPoint
   local getAnchorPoint2 = utils.getAnchorPoint2

   local colorUtils = require("colors")
   local getRGB = colorUtils.colorsRGB.I
   local getColorIndex  = colorUtils.getColorIndex
   local curNeighborGroup
   local b = nil
   local ind={}
   local n 

   if(director.boardSize) then
      n = director.boardSize
   else
      n =4
   end
   
   local xOffset =5 
   local dx= (display.contentWidth-2*xOffset)/n
   local yOffset = (display.contentHeight - n*dx) /3
   local rI = {-1,-1,-1, 0,0,0, 1 ,1,1}
   local cI = {-1,0,1,-1,0,1,-1,0,1}
   local dotap = true
   local dotouch =true
   local curRow =0
   local curCol = 0
   local endRow,endCol

   local function movedDelta(x0,y0,x1,y1,delta)
      return math.abs(x0-x1) > delta or math.abs(y0-y1) > delta
   end

   local function acos(x,y)
      local angle =  math.acos(x/math.sqrt(x*x+y*y))*180/math.pi
      if( y < 0) then 
	 return angle
      else 
	 return -angle
      end
   end

   local function center(obj)
      return obj.x ,obj.y
   end

   function changeGroup(obj,newGroup) 
      local x,y = obj:localToContent(0, 0) 
      obj.setReferencePoint = display.CenterReferencePoint 
      newGroup:insert(obj) 
      obj.x = x
      obj.y = y 
      obj.rotation = obj.parent.rotation
   end 

   local function endtouch()
   end
   
   local function endtap()
      dotap=true
   end

   local function getNeighbor(bb,row,col,k)
      local r = row+rI[k]
      local c = col+cI[k]
      return bb[r][c]
   end

   local function makegroup(bb,row,col)
      local g = display.newGroup()        
      for k=1,9 do
	 changeGroup(getNeighbor(bb,row,col,k),g) --See function above, using insert        
      end
      g:setReferencePoint(display.CenterReferencePoint)  
      g.rotation=0  
      return g
   end 



   local function getTrans (angle)
      -- 7->1, 4->2, 1->3,8->4,5->5,2->6,9->7,6->8,3->9
      -- 3 -> 1, 6 -> 2, 9 -> 3, 2 -> 4  , 5-> 5, 8->6, 1->7, 4-> 8, 7->9
      if(angle > 0) then
	 return {7,4,1,8,5,2,9,6,3}
      else
	 return {3,6,9,2,5,8,1,4,7}
      end
   end

   -- 1 2 3
   -- 4 5 6
   -- 7 8 9

   -- 7 4 1

   local function moveCells(row,col,angle)
      local t = getTrans(angle)
      local x = {}
      local y = {}
      for k =1,9 do
	 x[k] = getNeighbor(b,row,col,t[k]) 
      end
      for k =1,9 do
	 y[k] = getNeighbor(ind,row,col,t[k])
      end
      for k=1,9 do
	 r = row+rI[k]
	 c = col+cI[k]
	 b[r][c]= x[k]
	 ind[r][c]= y[k]
      end
   end

   local function moveCells2(row,col,angle)
      local nrots = math.abs(angle)/90
      local da
      if (angle < 0 ) then 
	 da =-90
      else
	 da=90
      end
      for i =1,nrots do
	 moveCells(row,col,da)
      end

   end

   
   local function getcoords(x,y)
      local col = math.floor((x-xOffset)/dx)+1
      local row = math.floor((y-yOffset)/dx)+1
      return row,col
   end



   local function handleTap(event)
      if(dotap) then
	 dotap=false
	 row,col= getcoords(event.x,event.y)
	 local grp = makegroup(b,row,col)
	 transition.to(grp,{time=5,rotation =90,delta=true,onComplete=endtap})
	 moveCells(row,col)
	 
      end
   end

   local function getDir(x0,y0,x1,y1)
      local dx = x1-x0
      local dy = y1 -y0
      if(movedDelta(x0,y0,x1,y1,5)) then
	 if (math.abs(dx) > math.abs(dy)) then
	    if(dx > 0 ) then
	       return "right"
	    else
	       return "left"
	    end
	 else
	    if(dy < 0 ) then
	       return "up"
	    else
	       return "down"
	    end
	 end
      else
	 return ""
      end
      
   end
   
   local function getAngle(event, t)
      cx,cy = center(t)
      local dx = event.x -cx 
      local dy = cy - event.y 
      local a = acos(dx,dy)
      return  acos(dx,dy)
   end

   local function getNearestAngle(angle)
      local argmin
      local abs=  math.abs 
      if ( angle > 0 ) then
	 local minangle = math.min(abs(angle),abs(90-angle),
				   abs(180-angle), abs(270-angle))
	 local angles = {abs(angle),abs(90-angle),abs(180-angle),abs(270-angle)}
         for i =1,4 do
	    if minangle == angles[i] then
	       argmin = i
	       break
	    end
	 end
	 local aa = {90,90,180,270}
	 return aa[argmin]
      else
	 local minangle = math.min(abs(angle),abs(-90-angle),
				   abs(-180-angle), abs(-270-angle))
	 local angles = {abs(angle),abs(-90-angle),abs(-180-angle),abs(-270-angle)}
         for i =1,4 do
	    if minangle == angles[i] then
	       argmin = i
	       break
	    end
	 end
	 local aa = {-90,-90,-180,-270}
	 return aa[argmin]
      end
   end

   local function endTouch()
      finishedTransit=true
   end

   local function makeNeighborsGroup(nblocks,row,col,dir)
      local group = nil
      rowAnchor,colAnchor,angleAnchor= getAnchorPoint2(nblocks,nblocks,row,col,dir)
      if(rowAnchor ~= -1) then
	 group = makegroup(b,rowAnchor,colAnchor)
      end
      return group
   end

   function rotateGroup (b,row,col,angle)
	local g = makegroup(b,row,col)
	g.rotation = angle
        moveCells2(row,col,angle)
   end 
   
function doMoves(nmoves,b,boardsize)
   local xf,yf = nil,nil
   if(nmoves >=1 and nmoves <= 4) then
      if(boardsize==4) then
	 xf = {2,3,2,3}
	 yf = {2,3,3,2}
      end
      if(xf ~= nil) then
	 for i =1 , nmoves do
	    rotateGroup(b,xf[i],yf[i],90)
	 end
      end
   end
end


   local function onTouch( event )

      local endRow,endCol

      local t = event.target
      
      -- Print info about the event. For actual production code, you should
      -- not call this function because it wastes CPU resources.
      
      local phase = event.phase
      if "began" == phase then

	 curRow ,curCol = getcoords(event.x,event.y) 
	 startRow,startCol=curRow,curCol
	 cx = event.x
	 cy = event.y
	 -- Make target the top-most object
	 local parent = t.parent
	 parent:insert( t )
	 display.getCurrentStage():setFocus( t )
	 
	 t.isFocus = true
	 
	 -- Store initial position
	 t.x0 = event.x - t.x
	 t.y0 = event.y - t.y
	 oldx = event.x
	 oldy = event.y
	 curNeighborGroup = nil
	 rowAnchor=-1
	 startAngle=0
	 direction =""
      elseif t.isFocus  then
	 if ("moved" == phase) and finishedTransit then
	    if(rowAnchor == -1) then 
	       direction = getDir(oldx,oldy,event.x,event.y)
	       if(direction ~= "") then
		  rowAnchor,colAnchor,angleAnchor= getAnchorPoint2(n,n,startRow,startCol,direction)
		  if(rowAnchor ~= -1) then
		     curNeighborGroup = makegroup(b,rowAnchor,colAnchor)
		     startAngle = getAngle(event,curNeighborGroup)
		     curAngle = startAngle
		  end
	       end
	    else
               cx,cy = center(curNeighborGroup)
	       local deltaAngle  =   getAngle(event,curNeighborGroup) - curAngle
	       curNeighborGroup.rotation = deltaAngle
	    end

	 elseif "ended" == phase or "cancelled" == phase then
	    if(curNeighborGroup ~= nil) then
	       local newAngle = getAngle(event,curNeighborGroup)
	       local finalAngle = getNearestAngle(curNeighborGroup.rotation)
	       finishedTransit=false
	       transition.to(curNeighborGroup,{time=100,rotation =finalAngle,delta=false,onComplete=endTouch})
	       moveCells2(rowAnchor,colAnchor,finalAngle)
	       print(rowAnchor,colAnchor,finalAngle)
	    end
	    display.getCurrentStage():setFocus( nil )
	    t.isFocus = false
	 end
      end
      
      -- Important to return true. This tells the system that the event
      -- should not be propagated to listeners of any objects underneath.
      return true
   end

   local function makeBoard(n,dx)
      local board ={}
      ind={}
      local i=1
      for row  = 1,n do
	 board[row] = {}
	 ind[row]={}
	 y0 = (row-1)* dx  + yOffset
	 for col =1,n do
	    x0 = (col-1)*dx +xOffset
	    board[row][col] =display.newRect(x0,y0,dx,dx)
	    board[row][col]:setFillColor(getRGB(getColorIndex(row,col,n)))
	    board[row][col]:setStrokeColor(0,0,0)
	    board[row][col].strokeWidth=2
	    
	    board[row][col].isVisible=true
	    board[row][col]:addEventListener("touch",onTouch)
	    ind[row][col]=i
	    i=i+1
	 end
      end
      return board
   end

   local function deleteBoard(board)
      for row  = 1,n do
	 for col =1,n do
	    if(board[row][col]~=nil) then
	       board[row][col]:removeSelf()
	    end
	 end
      end
   end

   local function hideShowBoard(board,visible)
      for row  = 1,n do
	 for col =1,n do
	    board[row][col].isVisible = visible
	 end
      end
   end


   local function reset()
      finishedTransit=true
      if(director.ind) then
	 ind = director.ind
      else
	 ind={}
      end
      
      if(director.board) then
	 b = director.board
	 hideShowBoard(b,true)
      else
	 if(director.boardSize) then
	    n = director.boardSize
	 else
	    n=4
	 end
	 b = makeBoard(n,dx)
	 if(director.solveNMoves ~= nil) then
	    doMoves(director.solveNMoves,b,n)
	 end

      end
   end
   
   local function reset2()
      finishedTransit=true
      deleteBoard(b)
      b=makeBoard(n,dx)
   end
   

   local function doReset(event)
      reset2()
   end

   local function pressBack (event)
      --if event.phase == "ended" then
      --deleteBoard(b)
      director.board = b
      director.ind = ind
      hideShowBoard(b,false)
      -- Runtime:removeEventListener("touch",handleStartTouch)
      director:changeScene ("menu")
      --end
      return true
   end



   --Runtime:addEventListener("touch",handleStartTouch)

   local fontsize = 36

   local backbutton = display.newText ("Menu" , 
				       50,
				       display.contentHeight - 80, nil, fontsize)

   backbutton:addEventListener ("tap", pressBack)
   localGroup:insert(backbutton)


   local resetBtn = display.newText ("Reset" , 
				     200,
				     display.contentHeight - 80, nil, fontsize)

   resetBtn:addEventListener ("tap", doReset)
   localGroup:insert(resetBtn)


   reset()

   return localGroup
end
